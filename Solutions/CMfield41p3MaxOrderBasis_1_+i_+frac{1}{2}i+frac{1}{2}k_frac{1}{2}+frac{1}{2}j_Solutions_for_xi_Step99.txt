sets of equivalent solutions: 
C1: [[3, 8, 3, -13, 16, 89, 11, 0, -i - k, (-7)*i + j + (-5)*k, 23/11*i + (-16/11)*j + (-9/11)*k, (-4/11)*i + 9/11*j + 14/11*k, (-54/11)*i + 61/11*j + 68/11*k, (-5/11)*i + 3/11*j + 1/11*k, (-2/11)*i + (-1/11)*j + (-4/11)*k, (-5/11)*i + (-8/11)*j + (-21/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, i - k, 7*i + j + (-5)*k, (-23/11)*i + (-16/11)*j + (-9/11)*k, 4/11*i + 9/11*j + 14/11*k, 54/11*i + 61/11*j + 68/11*k, 5/11*i + 3/11*j + 1/11*k, 2/11*i + (-1/11)*j + (-4/11)*k, 5/11*i + (-8/11)*j + (-21/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, i - k, 7*i - j + (-5)*k, (-23/11)*i + 16/11*j + (-9/11)*k, 4/11*i + (-9/11)*j + 14/11*k, 54/11*i + (-61/11)*j + 68/11*k, 5/11*i + (-3/11)*j + 1/11*k, 2/11*i + 1/11*j + (-4/11)*k, 5/11*i + 8/11*j + (-21/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, -i - k, (-7)*i - j + (-5)*k, 23/11*i + 16/11*j + (-9/11)*k, (-4/11)*i + (-9/11)*j + 14/11*k, (-54/11)*i + (-61/11)*j + 68/11*k, (-5/11)*i + (-3/11)*j + 1/11*k, (-2/11)*i + 1/11*j + (-4/11)*k, (-5/11)*i + 8/11*j + (-21/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, -i + k, (-7)*i - j + 5*k, 23/11*i + 16/11*j + 9/11*k, (-4/11)*i + (-9/11)*j + (-14/11)*k, (-54/11)*i + (-61/11)*j + (-68/11)*k, (-5/11)*i + (-3/11)*j + (-1/11)*k, (-2/11)*i + 1/11*j + 4/11*k, (-5/11)*i + 8/11*j + 21/11*k], [3, 8, 3, -13, 16, 89, 11, 0, i + k, 7*i - j + 5*k, (-23/11)*i + 16/11*j + 9/11*k, 4/11*i + (-9/11)*j + (-14/11)*k, 54/11*i + (-61/11)*j + (-68/11)*k, 5/11*i + (-3/11)*j + (-1/11)*k, 2/11*i + 1/11*j + 4/11*k, 5/11*i + 8/11*j + 21/11*k], [3, 8, 3, -13, 16, 89, 11, 0, i + k, 7*i + j + 5*k, (-23/11)*i + (-16/11)*j + 9/11*k, 4/11*i + 9/11*j + (-14/11)*k, 54/11*i + 61/11*j + (-68/11)*k, 5/11*i + 3/11*j + (-1/11)*k, 2/11*i + (-1/11)*j + 4/11*k, 5/11*i + (-8/11)*j + 21/11*k], [3, 8, 3, -13, 16, 89, 11, 0, -i + k, (-7)*i + j + 5*k, 23/11*i + (-16/11)*j + 9/11*k, (-4/11)*i + 9/11*j + (-14/11)*k, (-54/11)*i + 61/11*j + (-68/11)*k, (-5/11)*i + 3/11*j + (-1/11)*k, (-2/11)*i + (-1/11)*j + 4/11*k, (-5/11)*i + (-8/11)*j + 21/11*k]],

C2: [[3, 8, 3, -13, 16, 89, 11, 0, (-2)*i, (-11)*i - j + k, (-2/11)*i + 16/11*j + (-16/11)*k, 19/11*i + (-9/11)*j + 9/11*k, 75/11*i + (-61/11)*j + 61/11*k, (-1/11)*i + (-3/11)*j + 3/11*k, (-7/11)*i + 1/11*j + (-1/11)*k, (-34/11)*i + 8/11*j + (-8/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, 2*i, 11*i + j + k, 2/11*i + (-16/11)*j + (-16/11)*k, (-19/11)*i + 9/11*j + 9/11*k, (-75/11)*i + 61/11*j + 61/11*k, 1/11*i + 3/11*j + 3/11*k, 7/11*i + (-1/11)*j + (-1/11)*k, 34/11*i + (-8/11)*j + (-8/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, 2*i, 11*i - j + k, 2/11*i + 16/11*j + (-16/11)*k, (-19/11)*i + (-9/11)*j + 9/11*k, (-75/11)*i + (-61/11)*j + 61/11*k, 1/11*i + (-3/11)*j + 3/11*k, 7/11*i + 1/11*j + (-1/11)*k, 34/11*i + 8/11*j + (-8/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, (-2)*i, (-11)*i + j - k, (-2/11)*i + (-16/11)*j + 16/11*k, 19/11*i + 9/11*j + (-9/11)*k, 75/11*i + 61/11*j + (-61/11)*k, (-1/11)*i + 3/11*j + (-3/11)*k, (-7/11)*i + (-1/11)*j + 1/11*k, (-34/11)*i + (-8/11)*j + 8/11*k], [3, 8, 3, -13, 16, 89, 11, 0, (-2)*i, (-11)*i + j + k, (-2/11)*i + (-16/11)*j + (-16/11)*k, 19/11*i + 9/11*j + 9/11*k, 75/11*i + 61/11*j + 61/11*k, (-1/11)*i + 3/11*j + 3/11*k, (-7/11)*i + (-1/11)*j + (-1/11)*k, (-34/11)*i + (-8/11)*j + (-8/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, 2*i, 11*i - j - k, 2/11*i + 16/11*j + 16/11*k, (-19/11)*i + (-9/11)*j + (-9/11)*k, (-75/11)*i + (-61/11)*j + (-61/11)*k, 1/11*i + (-3/11)*j + (-3/11)*k, 7/11*i + 1/11*j + 1/11*k, 34/11*i + 8/11*j + 8/11*k], [3, 8, 3, -13, 16, 89, 11, 0, 2*i, 11*i + j - k, 2/11*i + (-16/11)*j + 16/11*k, (-19/11)*i + 9/11*j + (-9/11)*k, (-75/11)*i + 61/11*j + (-61/11)*k, 1/11*i + 3/11*j + (-3/11)*k, 7/11*i + (-1/11)*j + 1/11*k, 34/11*i + (-8/11)*j + 8/11*k], [3, 8, 3, -13, 16, 89, 11, 0, (-2)*i, (-11)*i - j - k, (-2/11)*i + 16/11*j + 16/11*k, 19/11*i + (-9/11)*j + (-9/11)*k, 75/11*i + (-61/11)*j + (-61/11)*k, (-1/11)*i + (-3/11)*j + (-3/11)*k, (-7/11)*i + 1/11*j + 1/11*k, (-34/11)*i + 8/11*j + 8/11*k]],

C3: [[3, 8, 3, -13, 16, 89, 11, 0, -i + k, (-4)*i + j + 6*k, (-25/11)*i + (-16/11)*j + (-7/11)*k, 23/11*i + 9/11*j + (-5/11)*k, 129/11*i + 61/11*j + (-7/11)*k, 4/11*i + 3/11*j + 2/11*k, (-5/11)*i + (-1/11)*j + 3/11*k, (-29/11)*i + (-8/11)*j + 13/11*k], [3, 8, 3, -13, 16, 89, 11, 0, i + k, 4*i + j + 6*k, 25/11*i + (-16/11)*j + (-7/11)*k, (-23/11)*i + 9/11*j + (-5/11)*k, (-129/11)*i + 61/11*j + (-7/11)*k, (-4/11)*i + 3/11*j + 2/11*k, 5/11*i + (-1/11)*j + 3/11*k, 29/11*i + (-8/11)*j + 13/11*k], [3, 8, 3, -13, 16, 89, 11, 0, i + k, 4*i - j + 6*k, 25/11*i + 16/11*j + (-7/11)*k, (-23/11)*i + (-9/11)*j + (-5/11)*k, (-129/11)*i + (-61/11)*j + (-7/11)*k, (-4/11)*i + (-3/11)*j + 2/11*k, 5/11*i + 1/11*j + 3/11*k, 29/11*i + 8/11*j + 13/11*k], [3, 8, 3, -13, 16, 89, 11, 0, -i + k, (-4)*i - j + 6*k, (-25/11)*i + 16/11*j + (-7/11)*k, 23/11*i + (-9/11)*j + (-5/11)*k, 129/11*i + (-61/11)*j + (-7/11)*k, 4/11*i + (-3/11)*j + 2/11*k, (-5/11)*i + 1/11*j + 3/11*k, (-29/11)*i + 8/11*j + 13/11*k], [3, 8, 3, -13, 16, 89, 11, 0, -i - k, (-4)*i - j + (-6)*k, (-25/11)*i + 16/11*j + 7/11*k, 23/11*i + (-9/11)*j + 5/11*k, 129/11*i + (-61/11)*j + 7/11*k, 4/11*i + (-3/11)*j + (-2/11)*k, (-5/11)*i + 1/11*j + (-3/11)*k, (-29/11)*i + 8/11*j + (-13/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, i - k, 4*i - j + (-6)*k, 25/11*i + 16/11*j + 7/11*k, (-23/11)*i + (-9/11)*j + 5/11*k, (-129/11)*i + (-61/11)*j + 7/11*k, (-4/11)*i + (-3/11)*j + (-2/11)*k, 5/11*i + 1/11*j + (-3/11)*k, 29/11*i + 8/11*j + (-13/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, i - k, 4*i + j + (-6)*k, 25/11*i + (-16/11)*j + 7/11*k, (-23/11)*i + 9/11*j + 5/11*k, (-129/11)*i + 61/11*j + 7/11*k, (-4/11)*i + 3/11*j + (-2/11)*k, 5/11*i + (-1/11)*j + (-3/11)*k, 29/11*i + (-8/11)*j + (-13/11)*k], [3, 8, 3, -13, 16, 89, 11, 0, -i - k, (-4)*i + j + (-6)*k, (-25/11)*i + (-16/11)*j + 7/11*k, 23/11*i + 9/11*j + 5/11*k, 129/11*i + 61/11*j + 7/11*k, 4/11*i + 3/11*j + (-2/11)*k, (-5/11)*i + (-1/11)*j + (-3/11)*k, (-29/11)*i + (-8/11)*j + (-13/11)*k]],

C4: [[5, 6, 4, -8, 15, 58, 7, j, -i + j + k, (-4)*i + 4*j + 4*k, 2/7*i + (-2/7)*j + (-2/7)*k, (-2/7)*i + 9/7*j + 2/7*k, (-23/7)*i + 23/7*j + 23/7*k, (-1/7)*i + 1/7*j + 1/7*k, 1/7*i + (-1/7)*j + (-1/7)*k, 8/7*i + (-1/7)*j + (-8/7)*k], [5, 6, 4, -8, 15, 58, 7, j, i + j + k, 4*i + 4*j + 4*k, (-2/7)*i + (-2/7)*j + (-2/7)*k, 2/7*i + 9/7*j + 2/7*k, 23/7*i + 23/7*j + 23/7*k, 1/7*i + 1/7*j + 1/7*k, (-1/7)*i + (-1/7)*j + (-1/7)*k, (-8/7)*i + (-1/7)*j + (-8/7)*k], [5, 6, 4, -8, 15, 58, 7, j, i + j - k, 4*i + 4*j + (-4)*k, (-2/7)*i + (-2/7)*j + 2/7*k, 2/7*i + 9/7*j + (-2/7)*k, 23/7*i + 23/7*j + (-23/7)*k, 1/7*i + 1/7*j + (-1/7)*k, (-1/7)*i + (-1/7)*j + 1/7*k, (-8/7)*i + (-1/7)*j + 8/7*k], [5, 6, 4, -8, 15, 58, 7, j, -i + j - k, (-4)*i + 4*j + (-4)*k, 2/7*i + (-2/7)*j + 2/7*k, (-2/7)*i + 9/7*j + (-2/7)*k, (-23/7)*i + 23/7*j + (-23/7)*k, (-1/7)*i + 1/7*j + (-1/7)*k, 1/7*i + (-1/7)*j + 1/7*k, 8/7*i + (-1/7)*j + 8/7*k], [5, 6, 4, -8, 15, 58, 7, -j, -i - j - k, (-4)*i + (-4)*j + (-4)*k, 2/7*i + 2/7*j + 2/7*k, (-2/7)*i + (-9/7)*j + (-2/7)*k, (-23/7)*i + (-23/7)*j + (-23/7)*k, (-1/7)*i + (-1/7)*j + (-1/7)*k, 1/7*i + 1/7*j + 1/7*k, 8/7*i + 1/7*j + 8/7*k], [5, 6, 4, -8, 15, 58, 7, -j, i - j - k, 4*i + (-4)*j + (-4)*k, (-2/7)*i + 2/7*j + 2/7*k, 2/7*i + (-9/7)*j + (-2/7)*k, 23/7*i + (-23/7)*j + (-23/7)*k, 1/7*i + (-1/7)*j + (-1/7)*k, (-1/7)*i + 1/7*j + 1/7*k, (-8/7)*i + 1/7*j + 8/7*k], [5, 6, 4, -8, 15, 58, 7, -j, i - j + k, 4*i + (-4)*j + 4*k, (-2/7)*i + 2/7*j + (-2/7)*k, 2/7*i + (-9/7)*j + 2/7*k, 23/7*i + (-23/7)*j + 23/7*k, 1/7*i + (-1/7)*j + 1/7*k, (-1/7)*i + 1/7*j + (-1/7)*k, (-8/7)*i + 1/7*j + (-8/7)*k], [5, 6, 4, -8, 15, 58, 7, -j, -i - j + k, (-4)*i + (-4)*j + 4*k, 2/7*i + 2/7*j + (-2/7)*k, (-2/7)*i + (-9/7)*j + 2/7*k, (-23/7)*i + (-23/7)*j + 23/7*k, (-1/7)*i + (-1/7)*j + 1/7*k, 1/7*i + 1/7*j + (-1/7)*k, 8/7*i + 1/7*j + (-8/7)*k]],

C5: [[5, 6, 4, -8, 15, 58, 7, j, 2*i + j, 8*i + 4*j, (-4/7)*i + (-2/7)*j, 4/7*i + 9/7*j, 46/7*i + 23/7*j, 2/7*i + 1/7*j, (-2/7)*i + (-1/7)*j, (-16/7)*i + (-1/7)*j], [5, 6, 4, -8, 15, 58, 7, j, (-2)*i + j, (-8)*i + 4*j, 4/7*i + (-2/7)*j, (-4/7)*i + 9/7*j, (-46/7)*i + 23/7*j, (-2/7)*i + 1/7*j, 2/7*i + (-1/7)*j, 16/7*i + (-1/7)*j], [5, 6, 4, -8, 15, 58, 7, -j, (-2)*i - j, (-8)*i + (-4)*j, 4/7*i + 2/7*j, (-4/7)*i + (-9/7)*j, (-46/7)*i + (-23/7)*j, (-2/7)*i + (-1/7)*j, 2/7*i + 1/7*j, 16/7*i + 1/7*j], [5, 6, 4, -8, 15, 58, 7, -j, 2*i - j, 8*i + (-4)*j, (-4/7)*i + 2/7*j, 4/7*i + (-9/7)*j, 46/7*i + (-23/7)*j, 2/7*i + (-1/7)*j, (-2/7)*i + 1/7*j, (-16/7)*i + 1/7*j]]


SAGE:
p = 3

if p == 2:
	QA = QuaternionAlgebra(SR, -1,-1, names=('i', 'j', 'k',) ); (i, j, k,) = QA._first_ngens(3)
else:
	S = Integers(8)
	if S(p) == 3 or S(p) == 7:
		QA = QuaternionAlgebra(SR, -1,-p, names=('i', 'j', 'k',) ); (i, j, k,) = QA._first_ngens(3)
	elif S(p) == 5:
		QA = QuaternionAlgebra(SR, -2,-p, names=('i', 'j', 'k',) ); (i, j, k,) = QA._first_ngens(3)
	elif S(p) == 1:
		print ("Choose a prime l = 3 mod 4 and l not a square mod p. Choose QA(-1,-l).") #QA = QuaternionAlgebra(SR, -1,-l, names=('i', 'j', 'k',) ); (i, j, k,) = QA._first_ngens(3)


Mlist = [1,0,0,0, 0,1,0,0, 0,1/2,0,1/2, 1/2,0,1/2,0]
M = matrix(QQ,4,Mlist)
O = [ QA(M[0][0]+M[0][1]*i+M[0][2]*j+M[0][3]*k), QA(M[1][0]+M[1][1]*i+M[1][2]*j+M[1][3]*k), QA(M[2][0]+M[2][1]*i+M[2][2]*j+M[2][3]*k), QA(M[3][0]+M[3][1]*i+M[3][2]*j+M[3][3]*k)]

B2 = M.determinant()

C = []
for m in [0..3]:
	for n in [0..3]:
		C += [M.delete_rows([m]).delete_columns([n]).determinant()]
C = matrix(4,C) #= [[C0_wtv, C1_wtv, C2_wtv, C3_wtv], [C0_wtu, C1_wtu, C2_wtu, C3_wtu], [C0_uvt, C1_uvt, C2_uvt, C3_uvt], [C0_uvw, C1_uvw, C2_uvw, C3_uvw]]

# Ci_uvw = det of minor obtained by deleting row 3 (for t) anc column i = C[]

B4_uvw = (C[3][0]^2 + C[3][1]^2)*p + (C[3][2]^2 + C[3][3]^2) #(C0_uvw^2 + C1_uvw^2)*p + (C2_uvw^2 + C3_uvw^2)
B4_uvt = (C[2][0]^2 + C[2][1]^2)*p + (C[2][2]^2 + C[2][3]^2) #(C0_uvt^2 + C1_uvt^2)*p + (C2_uvt^2 + C3_uvt^2)
B4_wtu = (C[1][0]^2 + C[1][1]^2)*p + (C[1][2]^2 + C[1][3]^2) #(C0_wtu^2 + C1_wtu^2)*p + (C2_wtu^2 + C3_wtu^2)
B4_wtv = (C[0][0]^2 + C[0][1]^2)*p + (C[0][2]^2 + C[0][3]^2) #(C0_wtv^2 + C1_wtv^2)*p + (C2_wtv^2 + C3_wtv^2)

bdu = sqrt(abs(B4_wtv/p))/abs(B2)
bdv = sqrt(abs(B4_wtu/p))/abs(B2)
bdw = sqrt(abs(B4_uvt/p))/abs(B2)
bdt = sqrt(abs(B4_uvw/p))/abs(B2)

@parallel
def find_elem_with_norm2(p,O,NN): # Much faster with large norms.
	sqN = sqrt(NN)
	res = []
	tt = var('tt')
	for u in [ceil(-bdu*sqN)..floor(bdu*sqN)]:
		for v in [ceil(-bdv*sqN)..floor(bdv*sqN)]:
			for w in [ceil(-bdw*sqN)..floor(bdw*sqN)]:
				x = QA(u*O[0] + v*O[1] + w*O[2] + tt*O[3])
				Nx = QA(x).reduced_norm()
				norm_eq = Nx - NN
				t=norm_eq.solve(tt)
				for l in [0..len(t)-1]:
					if t[l].rhs() in ZZ: # should instead solve norm eq for t. And same for Tr 0.
						elem = QA(u*O[0] + v*O[1] + w*O[2] + t[l].rhs()*O[3])
						if elem.reduced_norm() == NN:
							res += [QA(elem)]
	return list(set(res))


res1 = find_elem_with_norm2(p,O,1)
res1

#[1/2*i + 1/2*k, 1, 1/2*i + (-1/2)*k, -i, -1/2 + (-1/2)*j, -1/2 + 1/2*j, i, (-1/2)*i + (-1/2)*k, (-1/2)*i + 1/2*k, 1/2 + 1/2*j, -1, 1/2 + (-1/2)*j]

Summary:
C1: S1: [3, 8, 3, -13, 16, 89, 11, 0, -i - k, (-7)*i + j + (-5)*k, 23/11*i + (-16/11)*j + (-9/11)*k, (-4/11)*i + 9/11*j + 14/11*k, (-54/11)*i + 61/11*j + 68/11*k, (-5/11)*i + 3/11*j + 1/11*k, (-2/11)*i + (-1/11)*j + (-4/11)*k, (-5/11)*i + (-8/11)*j + (-21/11)*k]
[Nx1,Nx2,Nx3] = [0, 4, 127]

sage: for x in res1:
....:     [QA(x*x1*(x.conjugate())), QA(x*x2*(x.conjugate())), QA(x*x3*(x.conjugate()))]
....:     
[0, -i - k, (-4)*i - j + (-6)*k]
[0, -i - k, (-7)*i + j + (-5)*k]
[0, 2*i, 11*i - j + k]
[0, -i + k, (-7)*i - j + 5*k]
[0, -i + k, (-4)*i + j + 6*k]
[0, 2*i, 11*i + j - k]


C2: S3: [3, 8, 3, -13, 16, 89, 11, 0, 2*i, 11*i - j + k, 2/11*i + 16/11*j + (-16/11)*k, (-19/11)*i + (-9/11)*j + 9/11*k, (-75/11)*i + (-61/11)*j + 61/11*k, 1/11*i + (-3/11)*j + 3/11*k, 7/11*i + 1/11*j + (-1/11)*k, 34/11*i + 8/11*j + (-8/11)*k]

C3: S1: [3, 8, 3, -13, 16, 89, 11, 0, -i + k, (-4)*i + j + 6*k, (-25/11)*i + (-16/11)*j + (-7/11)*k, 23/11*i + 9/11*j + (-5/11)*k, 129/11*i + 61/11*j + (-7/11)*k, 4/11*i + 3/11*j + 2/11*k, (-5/11)*i + (-1/11)*j + 3/11*k, (-29/11)*i + (-8/11)*j + 13/11*k]

Thus, C1 ~ C2 ~ C3 equiv.

C4: S1: [5, 6, 4, -8, 15, 58, 7, j, -i + j + k, (-4)*i + 4*j + 4*k, 2/7*i + (-2/7)*j + (-2/7)*k, (-2/7)*i + 9/7*j + 2/7*k, (-23/7)*i + 23/7*j + 23/7*k, (-1/7)*i + 1/7*j + 1/7*k, 1/7*i + (-1/7)*j + (-1/7)*k, 8/7*i + (-1/7)*j + (-8/7)*k]
[Nx1,Nx2,Nx3] = [3, 7, 112]

sage: for x in res1:
....:     [QA(x*x1*(x.conjugate())), QA(x*x2*(x.conjugate())), QA(x*x3*(x.conjugate()))]
....:     
[-j, 2*i - j, 8*i + (-4)*j]
[j, -i + j + k, (-4)*i + 4*j + 4*k]
[-j, -i - j + k, (-4)*i + (-4)*j + 4*k]
[-j, -i - j - k, (-4)*i + (-4)*j + (-4)*k]
[j, 2*i + j, 8*i + 4*j]
[j, -i + j - k, (-4)*i + 4*j + (-4)*k]


C5: S1: [5, 6, 4, -8, 15, 58, 7, j, 2*i + j, 8*i + 4*j, (-4/7)*i + (-2/7)*j, 4/7*i + 9/7*j, 46/7*i + 23/7*j, 2/7*i + 1/7*j, (-2/7)*i + (-1/7)*j, (-16/7)*i + (-1/7)*j]

Thus, C4 ~ C5 equiv.